# The Quake Shack

## Todos

Grouped by sections and then sorted by priority (more or less).

### Bugs I introduced

* [_] show chatlog also in coop mode
* [_] DS: show the name of the person’s chat message in console message

### Network improvements

* [_] flush messages more often, increase update rate
* [_] only send message when actually needed, there’s too much idle chatter right now
* [_] look into that weird sluggish feel when ping is >100 ms (especially on Firefox)
* [_] introduce a required server/client version level and drop clients with wrong version

### QuakeC

* [_] implement the new syscalls that QuakeWorld introduced
* [_] improve stack trace / error handling
* [_] add some better tooling, maybe a transpile progs.dat to JavaScript?
* [_] prepare structure for JS client/server progs
* [_] PR/PF: replace all those `v_int`/`v_float` access through a proxy to improve readability
* [_] add ability to spawn entities after the server being ready

### Code smell

* [_] use more Exceptions and better Exception classes
* [X] there’s no proper clean up for Sound, sometimes sound gets stuck playing after Quit
* [_] completely get rid of `Host.client`
* [_] refactor that mess in `Mod`
* [_] refactor `MSG`/`SZ` especially in regards to `NET.message` and `client[…].message`
* [_] refactor global `SV` states into proper modules
* [_] rewrite `Vec` based on top of `Array`
* [_] completely switch to JS modules
* [_] use more await/async when necessary, introduce a shutting down flag to break async processing
* [_] replace all `>> 1` with `* 2` etc.

### SVC improvements

* [X] refactor chatting from `svc.print` to `svc.chatmsg`

### Random improvements

* [X] IN: touch support (smart phones)
* [_] Cvar: turn Cvars into proper self-registering classes, add quality of life things like events and more flags (read-only, cheats etc.)
* [_] UI: textboxes should act more like text boxes
* [X] UI: show connecting/loading state in a small UI box with progressbar
* [X] S: measure async load time for sounds, do not play them when it’s too late anyway
* [_] fix handling of gl_modes (mipmap vs no mipmap)
* [_] finished demos trigger a `Host.Error` (lost connection), needs fixing
* [X] S: still some issues with stopping sound upon a crash (mainly Firefox affected)
* [X] Sbar: Show recent chatter next to the ranking board

### Build pipeline

* [_] install dependencies, copy over required stuff to libs (like nipple) and deploy

## Ideas

### QuakeWorld improvements

There are a couple of things QuakeWorld improved and introduced, I should take a look at them and decide what’s good and what’s bad.

### Better frontend/backend separation

* I’m unhappy about the whole `Mod.js` and `R.js` clusterfun, it’s too intermingled, I already had to introduce hacks to get the dedicated server running without any frontend
* Split up Mod into BaseModel, AliasModel, BrushModel, SpriteModel as well as their matching renderer counterparts

### JavaScript instead of QuakeC

* introduce client game code as JavaScript modules
* introduce server game code as JavaScript modules
* but keep backward compatibility and have interfaces available
* would allow to write easier and better custom mods

### More multiplayer features

* have some sort of user registration/tracking
* collect K/D ratios, accuracy etc.
* upload avatars for users
* have multiple servers deployed across regions, connect to the closest ones
* coop lobbies (will only work once the `SV`/`Host`/`Net` global state clusterfuck is cleaned up)
* sv_timelimit, sv_maplist
* idle kick
* ask player to set a username when they have their default name
* increase limit to 32 players (like QW)
* pausable

### Random thoughts, ideas, etc.

* more streaming of data, make textures only available when needed
* voice chat? (not WebRTC based)
* improve readability of UI, but stick to the Quake charme
* also rework the UI system to someone better maintainable
* look into GoldSrc’s StudioModel, just as a coding challenge
* look into loading of Classic Doom assets, to make a game mash-up of sorts
* look into things like https://github.com/schteppe/cannon.js and https://github.com/kripken/ammo.js

## Log

### 2025-01-02

* first experiments with CANNON.js, but I’m seeing weird issues (fall through issues)
* added code that generates a triangle mesh based on the BSP structure (being fed into CANNON.js)
* introduced first version of proxy classes to ease up interfacing data going in / coming out of QuakeVM
* added quaternion math to `Vec`
* ED, PF, PR: in order to have a function call proxy, you need to know the function signature ahead of time unfortunately, I need to move all the proxy stuff from ED to PR

```
const global = new ED.Proxy(null);
const player = SV.server.edicts.find((ent) => ent.vars.classname === 'player');
// calls make_bubbles from QuakeC VM, sets self to player
global.make_bubbles.call(player);
```

### 2025-01-01

* added initial touchpad support using nipple.js, no longer a high prio, it’s a crap experience anyway
* added chatlog next to the ranking in multiplayer games
* BUG: ambient sounds are not stopped properly from time to time, no clue why
* changed the multiplayer menu a bit
* using AbortController to stop all pending network requests
* also added some `!this._started` safeguards to `S.LoadSound` and a few other places
* calling `S.LoadPendingFiles` to load all new files after connect
* `SV.svs.maxclientslimit = 32;`
* added `S.LoadPendingFiles`

### 2024-12-31

* lots of eslinting, detected some bugs (undefined vars etc.)
* skip forward or do not play sounds at all when they arrived too late via async loading
* implemented a loading screen
* rendering of the loading screen is blocked by blocking IO activities
* renderer is now utilizing requestAnimationFrame
* easing up the blocking during entering the game using `CL.processingServerInfoState`
* introduced Draw.BigChar etc.
* added `svc.loadsound` to tell the client to load sounds that were not precached
* added `Draw.CachePicDeferred` for loading things in the background, cut down initial loading times by 200%

### 2024-12-30

* completely rewrote the sound subsystem, it was a mess until now
* static sounds are lazy loaded
* most sounds are still being loaded after the game is already ready

### 2024-12-29

* more SV related fixes, don’t crash on full servers
* reworked frontend error handling, leave a proper error message, clean up WebGL context on a crash
* loading maps is taking too long, looking into streaming of data when used
* started adding `*Async` to COM

### 2024-12-28

* added express.js to serve files for the frontend part through the dedicated server
* reimplemented RCON
* restructured file structure a bit
* noticed the sound is a bit broken on Chrome, fixing AudioContext sound subsystem
* added alert box (`M.Alert`), so that errors can show a proper message box instead of the Console

### 2024-12-27

* starting rewriting low-level networking code
* added ping, introduced `svc.updatepings`
* improved `svc.disconnect`: added a reason string

### 2024-12-25

* started working on network driver based on Websockets

### 2024-12-24

* started working on `dedicated.js`
* introduced node.js replacements for COM and Sys


### 2024-12-23

* mainly code clean up, used ESLint
* cleaned out lots of `var`
