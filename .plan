# The Quake Shack

## Todos

Grouped by sections and then sorted by priority (more or less).

### Bugs I introduced

* [X] show chatlog also in coop mode
* [X] when one player dies in coop mode, all clients will reconnect and telefrag each other upon spawning
* [X] DS: show the name of the person’s chat message in console message
* [X] CL/SV: name change on local game makes the message emit twice
* [_] IN: input is no longer working properly once a coarse input device has been detected and the virtual joystick is setup
* [_] S: sometimes there’s still sound playing after the game has shutdown
* [_] S: make sure all remaining to be lazily loaded sound files are load after the game started
* [X] R: somewhere dynamic lights are not properly cast
* [_] PF: need to handle precache more gracefully
* [_] Host: Load Game and Save Game is now completely broken

### QuakeC / QuakeJS

* [_] prepare structure for JS client/server progs
* [X] PR/PF: replace all those `v_int`/`v_float` access through a proxy to improve readability
* [X] replace all `globals_(float|int)\[([0-9]+)\]` with proper constants use
* [X] PR/ED: implement missing `PR.etype.ev_field` handling to the EdictProxy
* [X] PR/ED: parse `progdefs.h` (generated by qcc) to maintain a list of shared variables
* [X] ED: abstract setting fields (needs to be done through EdictProxy)
* [X] SV+PR: get rid of self, other, etc. use a struct instead FunctionProxy knows how to use
* [_] PR: depending on what kind of game is being loaded, we need to have a different way of parsing entities as well
* [X] PF: add all arguments to each builtin (EngineInterface) and provide wrappers for the QuakeC VM
* [X] add ability to spawn entities after the server being ready via API
* [_] implement the new syscalls that QuakeWorld introduced
* [_] improve stack trace / error handling for QuakeC
* [_] add some better tooling, maybe a transpile QuakeC to JavaScript?
* [X] reimplement `ED.Print`
* [X] reimplement `Host.Give_f`
* [_] reimplement the Quake game in QuakeJS
  * [_] abstract model animation state machine
  * [X] world.qc
    * [X] worldspawn
    * [X] bodyque
    * [_] main (I believe we do not need this)
  * [_] misc.qc
    * [X] light entities
    * [X] info entities
    * [X] fireball entities
    * [_] barrel entities
    * [_] spikeshooter stuff
    * [_] bubbles
    * [_] view thing?
    * [_] SIMPLE BMODELS
    * [_] ambient sounds
    * [_] noisemaker
  * [_] weapons.qc
    * [X] W_Precache
    * [_] W_FireAxe
    * [_] wall_velocity, gibs, etc.
    * [_] MULTI-DAMAGE
    * [_] BULLETS
    * [_] ROCKETS
    * [_] LIGHTNING
    * [_] grenades
    * [_] spikes
    * [_] PLAYER WEAPON USE
    * [_] CheatCommand
    * [_] CycleWeaponCommand
    * [_] CycleWeaponReverseCommand
    * [_] ImpulseCommands
    * [_] W_WeaponFrame, SuperDamageSound
  * [_] client.qc
    * [_] info_intermission etc.
    * [_] SetChangeParms
    * [_] SetNewParms
    * [_] DecodeLevelParms
    * [_] FindIntermission, GotoNextMap, ExitIntermission, IntermissionThink
    * [_] execute_changelevel, trigger_changelevel entity
    * [_] PLAYER GAME EDGE FUNCTIONS
    * [_] ClientKill
    * [_] SelectSpawnPoint
    * [#] PutClientInServer
    * [_] QUAKED FUNCTIONS
    * [_] RULES, CheckRules etc.
    * [_] PlayerPreThink
    * [_] CheckPowerups
    * [_] PlayerPostThink
    * [#] ClientConnect
    * [#] ClientDisconnect
    * [_] ClientObituary


### Modern JavaScript

* [_] `COM` we need to completely get rid of synchroneously loading files, it’s flagged as deprecated
* [_] use more Exceptions and better Exception classes
* [_] look into worker and multithreading
* [_] look into bun.sh
* [_] completely switch to JS modules at some point

### Code smell

* [_] ED: rewrite that whole parsing mess using regexp
* [_] `Host.Savegame_f` and `ED` are having duplicate code (parsing entities)
* [X] there’s no proper clean up for Sound, sometimes sound gets stuck playing after Quit
* [_] completely get rid of `Host.client`
* [_] refactor that mess in `Mod`, split into loading and rendering parts
* [_] refactor `MSG`/`SZ` especially in regards to `NET.message` and `client[…].message`
* [_] refactor global `SV` states into proper modules
* [X] rewrite `Vec` based on top of `Array`
* [_] use more await/async when necessary, introduce a shutting down flag to break async processing
* [_] replace all `>> 1` with `* 2` etc.
* [X] SV: introduce `Edict` class, the current loose object already got `clear` and `equals` to it
* [_] SV: introduce `Client` class, the current loose object already got a few methods in it
* [_] index.html: reorganize shaders
* [_] `CL.state.intermission`/`ExitIntermission`: unsure what happens next on DS
* [_] Sys: remove onunload hook, it’s deprecated

### Network improvements

* [_] flush messages more often, increase update rate
* [_] only send message when actually needed, there’s too much idle chatter right now
* [_] look into that weird sluggish feel when ping is >100 ms (especially on Firefox)
* [_] introduce a required server/client version level and drop clients with wrong version
* [X] automatically connect to /api/ instead of /
* [_] ability to specify listen address/interface

### SVC improvements

* [X] refactor chatting from `svc.print` to `svc.chatmsg`

### Random improvements

* [X] IN: touch support (smart phones)
* [_] Cvar: turn Cvars into proper self-registering classes, add quality of life things like events and more flags (read-only, cheats etc.)
* [_] UI: textboxes should act more like text boxes
* [X] UI: show connecting/loading state in a small UI box with progressbar
* [X] S: measure async load time for sounds, do not play them when it’s too late anyway
* [_] fix handling of gl_modes (mipmap vs no mipmap)
* [_] finished demos trigger a `Host.Error` (lost connection), needs fixing
* [_] M: introduce a password required dialog to join password protected servers
* [X] S: still some issues with stopping sound upon a crash (mainly Firefox affected)
* [X] Sbar: Show recent chatter next to the ranking board
* [_] M: touch support (how to escape etc)
* [X] COM: instead of requesting files by using partial content requests to the webserver, let’s use files instead, leveraging CDNs
  * [X] DS: make it respond to file requests, map it to PAKs, also set Cache-Control headers properly
  * [X] COM: frontend part should simply ask for the file directly (e.g. `/data/pak0.pak/progs.dat`)
* [_] Cvar, IN, COM: write archive variables to localStorage immediately
* [_] SV, CL: we can ramp up the resolution of things like angles etc.
* [_] Mod: lazy load models
* [_] SV: spawn server should wait for async resources to arrive

### Rendering improvements

* [_] improve lighting and materials https://chatgpt.com/share/677d90a2-f364-800d-b077-9a93c9343b54
* [_] frame interpolation based on the PR state machine

### Build pipeline

* [_] install dependencies, copy over required stuff to libs (like nipple) and deploy
* [_] flush CDN cache

## Ideas

### QuakeWorld improvements

There are a couple of things QuakeWorld improved and introduced, I should take a look at them and decide what’s good and what’s bad.

### Better frontend/backend separation

* I’m unhappy about the whole `Mod.js` and `R.js` clusterfun, it’s too intermingled, I already had to introduce hacks to get the dedicated server running without any frontend
* Split up Mod into BaseModel, AliasModel, BrushModel, SpriteModel as well as their matching renderer counterparts

### JavaScript instead of QuakeC

* introduce client game code as JavaScript modules
* introduce server game code as JavaScript modules
* but keep backward compatibility and have interfaces available
* would allow to write easier and better custom mods
* there are a few AST modules, using an AST would allow transpiling QC to JS

#### QuakeC VM proxy and its mess

* Added `PR.EntityProxy` to proxy entities from edicts (`PR.etype.ev_entity`): stubbish,
* Added `PR.EdictProxy` to proxy edicts, accessing strings, floats, vectors, functions
* There is `SV.server.gameAPI` to map `globaldefs`
* There is `SV.server.edicts[].api` to map `fielddefs`
* There are too many variables floating around in `progs.dat`, need to parse `progsdef.h` in order to maintain a more strict list --> done
* Need to restructure things better:
  * there should be a `Progs` class/interface, this is then managing all access and how things are accessed
  * `GameInterface` --> will provide all functions and variables for global things (in PR land: `new EdictProxy(null)`)
  * `EdictInterface` --> will provide all functions and variables for edict/entity things (in PR land: `new EdictProxy(ent)`)
  * `EngineInterface` --> will basically provide `PF.builtin` in a meaningful way (in PR land: that PF mess)
* `PR.NewString` and `PR.TempString`: NewString is leaky, need to think of a better solution --> done
* `PF` needs to be refactored, lots of references to things like `self`, `other`, `goalentity`
  * some of the methods can be put to `Vector` as well
* `PR` needs to sit on top of `EngineInterface`:
  * QuakeC will still communicate a lot over global variables (e.g. `trace` data)
  * JavaScript game will communicate in a more modern way
* clusterfun ahead:
  * I need to decouple all PF/PR into its own isolated object
  * server needs to be decoupled as well and pass it down to the game API engine
  * game API engine interface needs a clear interface (see progdefs.h)
  * also spawning an entity needs the classname (here we need a crutch for QuakeC, because it doesn’t have that concept of instantiating classes first, it’s a bit loosy goosy)

### More multiplayer features

* have some sort of user registration/tracking
* collect K/D ratios, accuracy etc.
* upload avatars for users
* have multiple servers deployed across regions, connect to the closest ones
* coop lobbies (will only work once the `SV`/`Host`/`Net` global state clusterfuck is cleaned up)
* sv_timelimit, sv_maplist
* idle kick
* ask player to set a username when they have their default name --> done, sort of™
* increase limit to 32 players (like QW)
* pausable --> already exists

### Menu rework

* each page has the same set of elements
 * header
 * logo on the left (optional)
 * large items, small items
 * cursors
 * sliders, textboxes and buttons
* some menu things suck though (main menu is one big picture)

```
class MainMenu extends BaseMenu {
  constructor() {
    this._largeCursor = true;
    this._items = [
      new MenuButton()
    ]
  }
};
```

### Random thoughts, ideas, etc.

* more streaming of data, make textures only available when needed
* voice chat? (not WebRTC based)
* improve readability of UI, but stick to the Quake charme
* also rework the UI system to someone better maintainable
* look into GoldSrc’s StudioModel or some other format, just as a coding challenge
* look into colored lights
* make it Quake2 compatible?
  * not that trivial, since Quake2 game code is ia32/native
  * we could port over features though
* look into loading of Classic Doom assets, to make a game mash-up of sorts
* look into things like https://github.com/schteppe/cannon.js and https://github.com/kripken/ammo.js
* play around with skybox support etc.
* integrate some debugging tools like a texture and pic browser
* integrate a model viewer tool

## Log

### 2025-01-21

* it’s super important that models are set --> physics depend on them
* this whole edicts have to be there and then you need to split instantiating an entity is super ugly
* added a QC parser
  * the structure how I implemented it is not great, needs refactoring
  * it automatically groups frames into animations by name
* started adding a state machine to `BaseEntity`
  * there’s `_initStates` to init states
  * there’s `_defineState` to add states, similar to what QuakeC has
* introduced `GameAI` and `EntityAI` to separate logic a bit
  * GameAI will hold the global state
  * EntityAI will hold the entity state and provide functions

### 2025-01-20

* started reimplementing Quake game logic in QuakeJS
* changed a few interfaces around
* I’m again unhappy how I integrated QuakeC VM, it should follow the QuakeJS standard now

### 2025-01-19

* restructured spawning of entities
  * initiate the entity object
  * preset a couple of information (SV.SpawnServer or ED.LoadFromFile)
  * call the actual spawn function
* there’s no max edict limit anymore
* removed progsdef logic, I got no need for it anymore
* integrated webserver denies the browser caching when developer is set to 1
* temporary entities only have a life on client side
  * this could be refactored into the client code of QuakeJS
    * applies to Sbar as well

### 2025-01-18

* it’s now possible to mix QuakeJS and QuakeC world, albeit it’s super brittle and incomplete
  * QuakeJS can speak to QuakeC but not vice-versa
* started transforming things to `async`/`await`

### 2025-01-17

* moved lots of PF builtins to either `SV.Edict` or `Game.EngineInterface`
* started cleaning up some contraptions to bridge between progs and engine
  * removed `ClearEdictPrivateData`
  * also starting to move `v`, `v_int` and `v_float` completely private to `ProgsEntity`
  * renamed `EdictProxy` to `ProgsEntity`
  * removed `PR.GameInterface` (it was of no use anyway)
* I’m not happy how entangled clients and edicts are
* I need to introduce some feature flags the QuakeJS game can set:
  * interpolation yes/no
  * colored lightmaps yes/no
  * high precision protocol yes/no
* PR/PF: I need to add debug features or at least hide some of the asserts and safety checks behind `Host.developer.value`
* CL: loading maps is like 10x as fast now, found balance between updating the screen and loading/crunching data
* Host: changed behavior of `give`, it will now accept an entity classname and spawn it in front of the player

### 2025-01-16

* got rid of almost all `v_int`/`v_float`
* fixed a couple of issues that were introduced when I did some changes to the code during the past few weeks
  * damage information wasn’t properly sent to the client
  * some issues related to null entity vs worldspawn (I assumed edict 0 was null entity, but it’s also worldspawn)
  * sounds wouldn’t play sometimes
* we could actually get rid of precaching or at least the hard requirement of having all resources precached
* fixed one of the most stupid bugs in `Vector.clear()`: it would set the vector to `[0.0, 1.0, 2.0]` causing some fun
* SV<->CL: bumped up punchangle precision from 8 bit to 16 bit

### 2025-01-15

* introduced `Game.EngineInterface`
  * started to organize some of the API functions into a unified game API
* introduced `PF._generateBuiltinFunction`
  * you can pass a signature and it will automatically translate JavaScript native functions to QuakeC builtins
  * also comes with lots of sanity checks for the time being, I need to comment them out or at least make it toggleable
* introduced `PR._stats` to collect data on how many times what variable was read/written
* introduced `SV.Edict` class
* about to introduce `SV.Client` class
* there’s some weird entanglement between edicts and clients based on their ID
* NPCs and items are not affected by gravity, only clients with `SV.movetype.walk` are exposed to `SV.AddGravity`… bug?
* almost crunched all `v_int`/`v_float` access, but now I’m seeing all sorts of issues

Need to be more careful with those ent structures:
```
Jan 14 21:50:03 quakeshack.chrisnew.de node[57337]:         const dz = ent.v_float[PR.entvars.origin2] - SV.server.edicts[enemy].v_float[PR.entvars.origin2];
Jan 14 21:50:03 quakeshack.chrisnew.de node[57337]:                                                                              ^
Jan 14 21:50:03 quakeshack.chrisnew.de node[57337]: TypeError: Cannot read properties of undefined (reading 'v_float')
Jan 14 21:50:03 quakeshack.chrisnew.de node[57337]:     at SV.movestep (/srv/quakeshack-release/source/SV.js:940:78)
Jan 14 21:50:03 quakeshack.chrisnew.de node[57337]:     at Array.PF_walkmove (/srv/quakeshack-release/source/PF.js:460:28)
Jan 14 21:50:03 quakeshack.chrisnew.de node[57337]:     at PR.ExecuteProgram (/srv/quakeshack-release/source/PR.js:1219:26)
Jan 14 21:50:03 quakeshack.chrisnew.de node[57337]:     at FunctionProxy.call (/srv/quakeshack-release/source/PR.js:278:10)
Jan 14 21:50:03 quakeshack.chrisnew.de node[57337]:     at Object.apply (/srv/quakeshack-release/source/PR.js:261:20)
Jan 14 21:50:03 quakeshack.chrisnew.de node[57337]:     at SV.RunThink (/srv/quakeshack-release/source/SV.js:1195:11)
Jan 14 21:50:03 quakeshack.chrisnew.de node[57337]:     at SV.Physics_Step (/srv/quakeshack-release/source/SV.js:1741:6)
Jan 14 21:50:03 quakeshack.chrisnew.de node[57337]:     at SV.Physics (/srv/quakeshack-release/source/SV.js:1959:12)
Jan 14 21:50:03 quakeshack.chrisnew.de node[57337]:     at SV.SpawnServer (/srv/quakeshack-release/source/SV.js:859:6)
Jan 14 21:50:03 quakeshack.chrisnew.de node[57337]:     at /srv/quakeshack-release/source/Host.js:670:8
Jan 14 21:50:03 quakeshack.chrisnew.de node[57337]: Node.js v23.2.0
```

### 2025-01-14

* I might have found a way to group frames into animations:
  * going over functions that start off with `PR.op.state`,
  * extract this frame, think (next frame)
* fixes related to r_interpolation
  * applied to lightstyles as well
  * setting to 0 will apply to all interpolated values now

### 2025-01-13

* fixed co-op respawn bug

### 2025-01-10

* fixed player rendering bug
* adjusted Sbar code to have the player list and chatter box back in co-op mode
* found a new bug: dead players in co-op will lead to a reconnect for all

### 2025-01-09

* played around with smooth texture animations using pixel shaders

### 2025-01-07

* models with grouped frames do have linear interpolation now, done via the vertex shader for alias models
* added cvar `r_interpolation` to switch on/off interpolation of grouped frames
* added fade effect between animated textures, also controlable via `r_interpolation`

### 2025-01-06

* `SV.server.gameAPI.mapname` could be part of `SV.server` instead
* for some reason `SV.svs.maxclientslimit` is always forced to 1 when we are in full-stack mode, unsure if there was a reason behind that
* `Sbar` is basically everything that would be part of `cl_dll` in GoldSrc
* `SV.svs.clients[].name` must be an empty string, otherwise `Sbar` is going to bug out
* fixed a few `null` strings here in there due to some gameAPI vars I forgot to set

### 2025-01-05

* found some regenerated stuff, I added their generator algorithms next to them
* some more splitting off `PR` and `SV`
* should be more careful with replacing things willy-nilly, introduced a nasty bug that took me an hour to track down
* `PR.FunctionProxy` is now cached (using edict id and function id as key), improved memory and CPU usage drastically

### 2025-01-04

* more and more use of `edict.api`, server state is keeping track of the client names, not the game anymore
* unsure where the border is between `Host` and `SV`, there’s quite a lot of server related state inside of `Host`
* introduced `ed.clear()` to clear private data on edicts, more separation of PR private data access and rest of the engine

### 2025-01-03

* found QC files at https://www.doomworld.com/idgames/idstuff/unsup/progs106
* decompiling from `progs.dat` to JavaScript is getting more complicated due to branching
* introduced `SV.server.worldvars`
* also introduced proper function call proxy to execute PR functions
* ED/PR: seems like fielddefs are barely used (except save/load and parsing from Edict text)
* ED/PR: introduced `PR.SetString` able to recycle memory and update in place
* ED: parsing requires knowledge about the structure in order to set entvars, getting rid of PR reliance is hard

```
const player = SV.server.edicts.find((ent) => ent.vars.classname === 'player');
// calls make_bubbles from QuakeC VM, sets self to player
SV.server.worldvars.make_bubbles(player);
```

### 2025-01-02

* first experiments with CANNON.js, but I’m seeing weird issues (fall through issues)
* added code that generates a triangle mesh based on the BSP structure (being fed into CANNON.js)
* introduced first version of proxy classes to ease up interfacing data going in / coming out of QuakeVM
* added quaternion math to `Vec`
* ED, PF, PR: in order to have a function call proxy, you need to know the function signature ahead of time unfortunately, I need to move all the proxy stuff from ED to PR
* `Vec.Copy`’s order of arguments was a fucking trap to deal with

```
const global = new ED.Proxy(null);
const player = SV.server.edicts.find((ent) => ent.vars.classname === 'player');
// calls make_bubbles from QuakeC VM, sets self to player
global.make_bubbles.call(player);
```

### 2025-01-01

* added initial touchpad support using nipple.js, no longer a high prio, it’s a crap experience anyway
* added chatlog next to the ranking in multiplayer games
* BUG: ambient sounds are not stopped properly from time to time, no clue why
* changed the multiplayer menu a bit
* using AbortController to stop all pending network requests
* also added some `!this._started` safeguards to `S.LoadSound` and a few other places
* calling `S.LoadPendingFiles` to load all new files after connect
* `SV.svs.maxclientslimit = 32;`
* added `S.LoadPendingFiles`

### 2024-12-31

* lots of eslinting, detected some bugs (undefined vars etc.)
* skip forward or do not play sounds at all when they arrived too late via async loading
* implemented a loading screen
* rendering of the loading screen is blocked by blocking IO activities
* renderer is now utilizing requestAnimationFrame
* easing up the blocking during entering the game using `CL.processingServerInfoState`
* introduced Draw.BigChar etc.
* added `svc.loadsound` to tell the client to load sounds that were not precached
* added `Draw.CachePicDeferred` for loading things in the background, cut down initial loading times by 200%

### 2024-12-30

* completely rewrote the sound subsystem, it was a mess until now
* static sounds are lazy loaded
* most sounds are still being loaded after the game is already ready

### 2024-12-29

* more SV related fixes, don’t crash on full servers
* reworked frontend error handling, leave a proper error message, clean up WebGL context on a crash
* loading maps is taking too long, looking into streaming of data when used
* started adding `*Async` to COM

### 2024-12-28

* added express.js to serve files for the frontend part through the dedicated server
* reimplemented RCON
* restructured file structure a bit
* noticed the sound is a bit broken on Chrome, fixing AudioContext sound subsystem
* added alert box (`M.Alert`), so that errors can show a proper message box instead of the Console

### 2024-12-27

* starting rewriting low-level networking code
* added ping, introduced `svc.updatepings`
* improved `svc.disconnect`: added a reason string

### 2024-12-25

* started working on network driver based on Websockets

### 2024-12-24

* started working on `dedicated.js`
* introduced node.js replacements for COM and Sys

### 2024-12-23

* mainly code clean up, used ESLint
* cleaned out lots of `var`
